#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# ignore this directory
ignore '/menus/*/'

preprocess do
  items.each do |i|
    if i.identifier.start_with?("/transfer-api") && i[:title].nil?
      # Match transfer API titles from raw content
      m = /^[\=]{1}[[:blank:]](?<title>.*)/.match(i.raw_content)
      if !m.nil?
        i[:title] = m[:title]
        # i[:subtitle] = items['/docs/transfer-api/'][:version]
      else
        # Grab titles from index item
        # i[:title] = items['/docs/transfer-api/'][:title]
        # i[:subtitle] = items['/docs/transfer-api/'][:version]
      end   
    end

    if i.identifier.start_with?("/transfer-cli/docs") && i[:title].nil?
      if i[:extension].split('.').last == 'txt' or i[:extension].split('.').last == 'adoc'
        m = /^[\=]{1}[[:blank:]](?<title>.*)/.match(i.raw_content)
        if !m.nil?
          i[:title] = m[:title]
        end
      end
    end
    # Adjust adoc include paths to be absolute
    if i.identifier.start_with?("/transfer-cli/docs")
      # Add full path for adoc includes
      raw = i.raw_content
      raw.gsub!(/include::include/, 'include::content/transfer-cli/docs/include')
    end

    # Match Toolkit titles from raw content
    if i.identifier.start_with?('/toolkit') && i[:title].nil?
      # i[:title] = i[:filename]
      # i.content.sub(/Globus/, 'ffff')
      # m = /class="title">.*<\/a>(?<title>.*)(<\/h2>.*<)/m.match(i.raw_content)
      if !m.nil?
        # puts m[:title]
        # i[:title] = m[:title]
      end
    end
  end
end


compile '/transfer-api/*' do
  if !item.binary?
    if item[:extension] == 'adoc'
      filter :asciidoc
      layout item[:layout] || 'api'
    else
      filter :erb
      layout item[:layout] || 'api'
    end
  end
end

compile '/transfer-cli/*' do
  if !item.binary?
    if ["txt", "adoc"].include?item[:extension].split('.').last
      filter :asciidoc
      layout item[:layout] || 'transfer-cli'
    else
      filter :erb
      layout item[:layout] || 'transfer-cli'
    end
  end
end

compile '/toolkit/*' do
  if !item.binary?
    filter :erb
    layout item[:layout] || 'toolkit'
  end 
end 

compile '*' do
  # if item[:extension] == 'adoc'
  #   filter :asciidoc
  #   layout 'default'
  if item[:extension] == 'css'
    # don’t filter stylesheets
  elsif item[:extension] == 'js'
    # don’t filter javascripts
  elsif item.binary?
    # don’t filter binary items
  # elsif item[:kind] == 'page'
    # layout 'page'
  else 
    filter :erb
    layout item[:layout] || 'default'
  end
end

route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item[:extension] == 'js'
    # Write item with identifier /foo/ to /foo.js
    item.identifier.chop + '.js'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
