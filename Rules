#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# ignore this directory
ignore '/menus/*/'
ignore '/site-docs/asciiguide_old*'

preprocess do

  # Iterate each item
  items.each do |i|

    if i[:title].nil?
      if i[:extension] == 'txt' or i[:extension] == 'adoc'
        m = /^[\=]{1}[[:blank:]](?<title>.*)/.match(i.raw_content)
        if !m.nil?
          i[:title] = m[:title]
        end
      end
    end

    # Adjust adoc include & image paths to be absolute
    if i.identifier.start_with?("/cli/reference")
      # Add full path for adoc includes
      raw = i.raw_content
      raw.gsub!(/include::include/, 'include::content/cli/reference/include')
    end
    if i.identifier.start_with?("/site-docs") && i[:extension].split('.').last == 'adoc'
      # Add full path for adoc includes
      raw = i.raw_content
      raw.gsub!(/include::include/, 'include::content/site-docs/include')
    end
    if i.identifier.start_with?("/api/transfer/") && i[:extension].split('.').last == 'adoc'
        # Replace transfer version
        raw = i.raw_content
        raw.gsub!(/__LATEST_TRANSFER_VERSION__/, 'v0.10')
    end
    if i.identifier.start_with?("/api/transfer/versions/v0.10") && i[:extension].split('.').last == 'adoc'
        # Replace transfer version
        raw = i.raw_content
        raw.gsub!(/__TRANSFER_VERSION__/, 'v0.10')
    end
    if i.identifier.start_with?("/cli") && i[:title].nil?
      if i[:extension].split('.').last == 'txt' or i[:extension].split('.').last == 'adoc'
        m = /^[\=]{1}[[:blank:]](?<title>.*)/.match(i.raw_content)
        if !m.nil?
          i[:title] = m[:title]
        end
      end
    end
  end
end

compile '/static/*' do
end

compile '/OLD/*' do
end

compile '/api/transfer/*' do
  if !item.binary?
    if item[:extension] == 'adoc'
      filter :asciidoc
      layout item[:layout] || 'api'
    else
      filter :erb
      layout item[:layout] || 'api'
    end
  end
end

compile '/cli/*' do
  if !item.binary?
    if ["txt", "adoc"].include?item[:extension].split('.').last
      filter :asciidoc
      layout item[:layout] || 'cli'
    else
      filter :erb
      layout item[:layout] || 'cli'
    end
  end
end

compile '/site-docs/*' do
  if !item.binary?
    if item.identifier.include?('/raw')
      # do not filter
    elsif ["txt", "adoc"].include?item[:extension].split('.').last
      filter :asciidoc
      layout 'default'
    else
      filter :erb
      layout 'default'
    end
  end
end

compile '*' do
  # if item[:extension] == 'adoc'
  #   filter :asciidoc
  #   layout 'default'
  if item[:extension] == 'css'
    # don’t filter stylesheets
  elsif item[:extension] == 'js'
    # don’t filter javascripts
  elsif item[:extension] == 'cert'
    # don't filter cert files
  elsif item[:extension] == 'adoc' && item.identifier.include?('/raw')
    # don't filter raw files
  elsif item.binary?
    # don’t filter binary items
  # elsif item[:kind] == 'page'
    # layout 'page'
  elsif item[:extension] == 'adoc'
      filter :asciidoc
      layout item[:layout] || 'default'
  else
    filter :erb
    layout item[:layout] || 'default'
  end
end

route '/static/*' do
  item.identifier[7..-2]
end

route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item[:extension] == 'js'
    # Write item with identifier /foo/ to /foo.js
    item.identifier.chop + '.js'
  elsif item[:extension] == 'cert'
    # Write item with identifier /foo/ to /foo.cert
    item.identifier.chop + '.cert'
  elsif item[:extension] == 'adoc' && item.identifier.include?('/raw')
    # Write item with identifier /foo/ to /foo.adoc
    item.identifier.chop + '.adoc'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
