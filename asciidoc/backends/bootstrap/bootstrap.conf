#
# bootstrap.conf
#
# An AsciiDoc backend that renders the AsciiDoc source as HTML5 in the style of
# Bootstrap (http://getbootstrap.com).
# Based on and overriding /usr/local/etc/asciidoc/html5.conf
# Added in code from
# https://github.com/asciidoctor/asciidoctor/blob/master/compat/asciidoc.conf to
# help make AsciiDoc conform with Asciidoctor's fixes and customizations

include::{asciidoc-confdir}/html5.conf[]

[miscellaneous]
newline=\n

[attributes]
source-highlighter= pygments
doctype= article
basebackend=html
basebackend-html=
basebackend-bootstrap=
idprefix=
bootstrap-backend-version=3.3.0
bsver=3
apostrophe='
asterisk=*
backtick=`
brvbar=&#166;
caret=^
# plus introduced in AsciiDoc 8.6.9
plus=&#43;
space=" "
tilde=~
user-home={eval:os.path.expanduser('~')}
vbar=|
# NOTE use -a no-inline-literal to set compat-mode to default when using AsciiDoc Python
ifndef::no-inline-literal[]
compat-mode=legacy
endif::[]

[replacements]
# right single quote
(?<!\\)`'=&#8217;
# escaped right single quote
\\`'=`'

[quotes]
# disable single quotes as constrained formatting marks for emphasis
# this change can also be made in the document using the attribute entry :quotes.':
ifdef::compat-mode[]
'=
+=
++=
`=
``=#monospaced
`|`=monospaced
\##=#mark
\#=mark
endif::[]

# enables markdown-style headings
[titles]
sect0=^(=|#) +(?P<title>[\S].*?)(?: +\1)?$
sect1=^(==|##) +(?P<title>[\S].*?)(?: +\1)?$
sect2=^(===|###) +(?P<title>[\S].*?)(?: +\1)?$
sect3=^(====|####) +(?P<title>[\S].*?)(?: +\1)?$
sect4=^(=====|#####) +(?P<title>[\S].*?)(?: +\1)?$
sect5=^(======|######) +(?P<title>[\S].*?)(?: +\1)?$

# Disable subs on pass block by default
[blockdef-pass]
subs=none

# enables fenced code blocks
# FIXME I haven't sorted out yet how to do syntax highlighting
[blockdef-fenced-code]
delimiter=^```(?:\w+(?:,numbered)?)?$
ifdef::language[]
style=source
template::[source-filter-style]
endif::language[]
ifndef::language[]
template=listingblock
subs=verbatim
posattrs=style
endif::language[]

# enables blockquotes to be defined using two double quotes
[blockdef-air-quote]
template::[blockdef-quote]
delimiter=^""$

# markdown-style blockquote (paragraph only)
# FIXME does not strip leading > on subsequent lines
[paradef-markdown-quote]
delimiter=(?s)>\s*(?P<text>\S.*)
style=quote
quote-style=template="quoteparagraph",posattrs=("style","attribution","citetitle")

# fix regex for callout list to require number; also makes markdown-style blockquote work
[listdef-callout]
posattrs=style
delimiter=^<?(?P<index>\d+>) +(?P<text>.+)$
type=callout
tags=callout
style=arabic

# removed references to source-filter-style template
# enables literal block to be used as source block (broken, crashes)
# [blockdef-literal]
# template::[source-filter-style]

# enables source block when source-highlighter is not defined (broken, crashes)
# ifndef::source-highlighter[]
# [source-filter-style]
# source-style=template="listingblock",subs=("specialcharacters","callouts"),posattrs=("style","language","src_numbered","src_tab")

# [paradef-default]
# template::[source-filter-style]

# [paradef-literal]
# template::[source-filter-style]

# [blockdef-open]
# template::[source-filter-style]

# [blockdef-listing]
# template::[source-filter-style]
# endif::source-highlighter[]

[tabledef-csv]
template::[tabledef-default]
delimiter=^,={3,}$
format=csv

[tabledef-dsv]
template::[tabledef-default]
delimiter=^:={3,}$
format=dsv

[macros]
ifdef::no-inline-literal[]
(?su)\\?\+\+(?P<passtext>.*?)\+\+=pass[specialcharacters]
(?su)(?<![+\w])(\\?\+(?P<passtext>\S|\S.*?\S)\+)(?![+\w])=pass[specialcharacters]
endif::no-inline-literal[]

# additional callout match behind line comments
#(?://|#|;;) ?\((?P<index>\d+)\)=callout
# additional callout match for XML
[\\]?&lt;!--(?P<index>\d+)--&gt;=callout

# --- or *** or ___ or - - - or * * * or _ _ _ (in addition to the built-in ''')
^ {0,3}([-\*_])( *)\1\2\1$=#ruler

# btn:[Save]
(?su)(?<!\w)\\?btn:\[(?P<attrlist>(?:\\\]|[^\]])+?)\]=button

# kbd:[F11] or kbd:[Ctrl+T] or kbd:[Ctrl,T]
(?su)(?<!\w)\\?kbd:\[(?P<attrlist>(?:\\\]|[^\]])+?)\]=keyboard

# menu:Search[] or menu:File[New...] or menu:View[Page Style, No Style]
# TODO implement menu:View[Page Style > No Style] syntax
(?su)(?<!\w)[\\]?(?P<name>menu):(?P<target>\w|\w.*?\S)?\[(?P<attrlist>.*?)\]=

ifdef::basebackend-html[]
[sect5]
<div class="sect5{style? {style}}{role? {role}}">
<h6{id? id="{id}"}>{title}</h6>
|
</div>

[button-inlinemacro]
<b class="button">{1}</b>

[keyboard-inlinemacro]
{set2:keys:{eval:re.split(r'(?<!\+ |.\+)\+', '{1}')}}
{2%}{eval:len({keys}) == 1}<kbd>{1}</kbd>
{2%}{eval:len({keys}) == 2}<kbd class="combo"><kbd>{eval:{keys}[0].strip()}</kbd>+<kbd>{eval:{keys}[1].strip()}</kbd></kbd>
{2%}{eval:len({keys}) == 3}<kbd class="combo"><kbd>{eval:{keys}[0].strip()}</kbd>+<kbd>{eval:{keys}[1].strip()}</kbd>+<kbd>{eval:{keys}[2].strip()}</kbd></kbd>
{2#}{3%}<kbd class="combo"><kbd>{1}</kbd>+<kbd>{2}</kbd></kbd>
{3#}<kbd class="combo"><kbd>{1}</kbd>+<kbd>{2}</kbd>+<kbd>{3}</kbd></kbd>

[menu-inlinemacro]
{1%}<span class="menu">{target}</span>
{1#}{2%}<span class="menuseq"><span class="menu">{target}</span>&#160;&#9656; <span class="menuitem">{1}</span></span>
{2#}{3%}<span class="menuseq"><span class="menu">{target}</span>&#160;&#9656; <span class="submenu">{1}</span>&#160;&#9656; <span class="menuitem">{2}</span></span>
{3#}<span class="menuseq"><span class="menu">{target}</span>&#160;&#9656; <span class="submenu">{1}</span>&#160;&#9656; <span class="submenu">{2}</span>&#160;&#9656; <span class="menuitem">{3}</span></span>

[literal-inlinemacro]
<code>{passtext}</code>

[tags]
emphasis=<em{1? class="{1}"}>|</em>
strong=<strong{1? class="{1}"}>|</strong>
monospaced=<code{1? class="{1}"}>|</code>
superscript=<sup{1? class="{1}"}>|</sup>
subscript=<sub{1? class="{1}"}>|</sub>
mark={1=<mark>}{1?<span class="{1}">}|{1?</span>}{1=</mark>}

[monospacedwords]
<code>{words}</code>

ifdef::linkattrs[]
[http-inlinemacro]
<a href="{name}:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={name}:{target}}</a>
[https-inlinemacro]
<a href="{name}:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={name}:{target}}</a>
[ftp-inlinemacro]
<a href="{name}:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={name}:{target}}</a>
[file-inlinemacro]
<a href="{name}:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={name}:{target}}</a>
[irc-inlinemacro]
<a href="{name}:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={name}:{target}}</a>
[mailto-inlinemacro]
<a href="mailto:{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={target}}</a>
[link-inlinemacro]
<a href="{target}"{id? id="{id}"}{role? class="{role}"}{window? target="{window}"}>{1={target}}</a>
endif::linkattrs[]

[listtags-numbered]
list=<div class="olist{style? {style}}{compact-option? compact}{role? {role}}"{id? id="{id}"}>{title?<div class="title">{title}</div>}<ol class="{style}"{style@loweralpha: type="a"}{style@lowerroman: type="i"}{style@upperalpha: type="A"}{style@upperroman: type="I"}{start? start="{start}"}>|</ol></div>

[tabletags-monospaced]
paragraph=<p class="tableblock"><code>|</code></p>

[sect0]
<h1{id? id="{id}"} class="sect0">{title}</h1>
|

# support for document title in embedded documents (broken, crashes)
# ifeval::[not config.header_footer]
# [preamble]
# <h1>{title={doctitle}}</h1>{set:title-rendered:}
# <div id="preamble">
# <div class="sectionbody">
# |
# </div>
# {toc,toc2#}{toc-placement$preamble:}{template:toc}
# </div>

[sect1]
{title-rendered%}<h1>{doctitle}</h1>
<div class="sect1{style? {style}}{role? {role}}">
<h2{id? id="{id}"}>{numbered?{sectnum} }{title}</h2>
<div class="sectionbody">
|
</div>
</div>
endif::[]

# override to add the admonition name to the class attribute of the outer element
[admonitionblock]
<div class="admonitionblock {name}{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}>
<table><tr>
<td class="icon">
{data-uri%}{icons#}<img src="{icon={iconsdir}/{name}.png}" alt="{caption}">
{data-uri#}{icons#}<img alt="{caption}" src="data:image/png;base64,
{data-uri#}{icons#}{sys:"{python}" -u -c "import base64,sys; base64.encode(sys.stdin,sys.stdout)" < "{eval:os.path.join(r"{indir={outdir}}",r"{icon={iconsdir}/{name}.png}")}"}">
{icons%}<div class="title">{caption}</div>
</td>
<td class="content">
<div class="title">{title}</div>
|
</td>
</tr></table>
</div>

# modified so that:
# a. imagesdir is only prepended if target is not a uri or absolute path (relative path only)
# b. automatic alt text is calculated from basename of target without extension
# note that the escaped_target attribute must be set in order to use a uri in the conditional attribute reference
[image-inlinemacro]
<span class="image{role? {role}}"{float? style="float: {float}"}>{set2:escaped_target:{eval:'{target}'.replace(':','\:')}}
<a class="image" href="{link}">
{data-uri%}<img src="{target@^(/|https?\://).*:{escaped_target}:{imagesdir?{imagesdir}}{imagesdir?/}{escaped_target}}" alt="{alt={eval:os.path.splitext(os.path.basename('{target}'))[0]}}"{width? width="{width}"}{height? height="{height}"}{title? title="{title}"}>
{data-uri#}<img alt="{alt={target}}"{width? width="{width}"}{height? height="{height}"}{title? title="{title}"}
{data-uri#}{sys:"{python}" -u -c "import mimetypes,base64,sys; print 'src=\"data:'+mimetypes.guess_type(r'{target}')[0]+';base64,'; base64.encode(sys.stdin,sys.stdout)" < "{eval:os.path.join(r"{indir={outdir}}",r"{imagesdir=}",r"{target}")}"}">
{link#}</a>
</span>

# modified so that:
# a. imagesdir is only prepended if target is not a uri or absolute path (relative path only)
# b. automatic alt text is calculated from basename of target without extension
# note that the escaped_target attribute must be set in order to use a uri in the conditional attribute reference
[image-blockmacro]
<div class="imageblock{style? {style}}{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}{align? style="text-align:{align};"}{float? style="float: {float}"}>
<div class="content">{set2:escaped_target:{eval:'{target}'.replace(':','\:')}}
<a class="image" href="{link}">
{data-uri%}<img src="{target@^(/|https?\://).*:{escaped_target}:{imagesdir?{imagesdir}}{imagesdir?/}{escaped_target}}" alt="{alt={eval:os.path.splitext(os.path.basename('{target}'))[0]}}"{width? width="{width}"}{height? height="{height}"}>
{data-uri#}<img alt="{alt={target}}"{width? width="{width}"}{height? height="{height}"}
{data-uri#}{sys:"{python}" -u -c "import mimetypes,base64,sys; print 'src=\"data:'+mimetypes.guess_type(r'{target}')[0]+';base64,'; base64.encode(sys.stdin,sys.stdout)" < "{eval:os.path.join(r"{indir={outdir}}",r"{imagesdir=}",r"{target}")}"}">
{link#}</a>
</div>
<div class="title">{caption={figure-caption} {counter:figure-number}. }{title}</div>
</div>

# a common template for emitting the attribute for a quote or verse block
# don't output attribution div if attribution or citetitle are both empty
[attribution]
{attribution,citetitle#}
<footer>{attribution}{citetitle?, <cite title="{citetitle}">{citetitle}</cite>}</footer>
{attribution,citetitle#}

# override to use blockquote element for content and cite element for cite title
[quoteblock]
<div class="quoteblock{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}>
<div class="title">{title}</div>
<blockquote>
|
template::[attribution]
</blockquote>
</div>

# override to use cite element for cite title
[verseblock]
<div class="verseblock{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}>
<div class="title">{title}</div>
<pre class="content">
|
</pre>
template::[attribution]
</div>

# override tabletags to support cellbgcolor
[tabletags-default]
headdata=<th class="tableblock halign-{halign=left} valign-{valign=top}"{colspan@1:: colspan="{colspan}"}{rowspan@1:: rowspan="{rowspan}"}{cellbgcolor? style="background-color:{cellbgcolor};"}>|</th>
bodydata=<td class="tableblock halign-{halign=left} valign-{valign=top}"{colspan@1:: colspan="{colspan}"}{rowspan@1:: rowspan="{rowspan}"}{cellbgcolor? style="background-color:{cellbgcolor};"}>|</td>

# override header cells to use th
[tabletags-header]
bodydata=<th class="tableblock halign-{halign=left} valign-{valign=top}" {colspan@1::colspan="{colspan}" }{rowspan@1::rowspan="{rowspan}" }>|</th>
paragraph=<p class="tableblock">|</p>

endif::basebackend-html[]

# --------------------
# Standard Config
# --------------------

[paragraph]
<p{role? class="{role}"}>|</p>

[toc]
<div id="toctitle">{toc-title}</div>
<ul id="toc" class="list-unstyled">
<noscript><p><b>JavaScript must be enabled in your browser to display the table of contents.</b></p></noscript>
</ul>

# adjust to use <code> tags instead of monospaced class
[literal-inlinemacro]
# Inline literal.
<code>{passtext}</code>

[tags]
# Quoted text.
monospaced=<code>{1?<span class="{1}">}|{1?</span>}</code>

# Special word substitution.
[monospacedwords]
<code>{words}</code>


[header]
#<!DOCTYPE html>
#<html lang="{lang=en}">
#<head>
#<meta http-equiv="Content-Type" content="text/html; charset={encoding}">
#<meta name="generator" content="AsciiDoc {asciidoc-version}">
#<meta name="description" content="{description}">
#<meta name="keywords" content="{keywords}">
#<title>{title}</title>
#{title%}<title>{doctitle=}</title>
#ifdef::linkcss[]
#<link rel="stylesheet" href="{stylesdir=.}/{theme=asciidoc}.css" type="text/css">
#ifeval::["{source-highlighter}"=="pygments"]
#<link rel="stylesheet" href="{stylesdir=.}/pygments.css" type="text/css">
#endif::[]

# DEPRECATED: 'pygments' attribute.
#ifdef::pygments[<link rel="stylesheet" href="{stylesdir=.}/pygments.css" type="text/css">]

#ifdef::toc2[<link rel="stylesheet" href="{stylesdir=.}/toc2.css" type="text/css" />]
#<link rel="stylesheet" href="{stylesdir=.}/{stylesheet}" type="text/css">
#endif::linkcss[]
#ifndef::linkcss[]
#<style type="text/css">
#include1::{theme%}{stylesdir=./stylesheets}/asciidoc.css[]
#include1::{themedir}/{theme}.css[]
#ifeval::["{source-highlighter}"=="pygments"]
#include1::{stylesdir=./stylesheets}/pygments.css[]
#endif::[]

# DEPRECATED: 'pygments' attribute.
#ifdef::pygments[]
#include1::{stylesdir=./stylesheets}/pygments.css[]
#endif::pygments[]

#ifdef::toc2[]
#include1::{stylesdir=./stylesheets}/toc2.css[]
#endif::toc2[]
#include1::{stylesheet}[]
#</style>
#endif::linkcss[]
#ifndef::disable-javascript[]
#ifdef::linkcss[]
#<script type="text/javascript" src="{scriptsdir=.}/{theme}.js"></script>
#<script type="text/javascript">
#TODO: Escape not necessary in HTML5?
# Escape as CDATA to pass validators.
#/*<![CDATA[*/
#asciidoc.install({toc,toc2?{toclevels}});
#/*]]>*/
#</script>
#endif::linkcss[]
#ifndef::linkcss[]
<script type="text/javascript">
# Escape as CDATA to pass validators.
/*<![CDATA[*/
include1::./asciidoc.js[]
#include1::{scriptsdir=./javascripts}/asciidoc.js[]
#include1::{themedir}/{theme}.js[warnings=False]
asciidoc.install({toc,toc2?{toclevels}});
/*]]>*/
</script>
#endif::linkcss[]
#endif::disable-javascript[]
#ifdef::asciimath[]
#ifdef::linkcss[]
#<script type="text/javascript" src="{scriptsdir=.}/ASCIIMathML.js"></script>
#endif::linkcss[]
#ifndef::linkcss[]
#<script type="text/javascript">
# Escape as CDATA to pass validators.
#/*<![CDATA[*/
#include1::{scriptsdir=./javascripts}/ASCIIMathML.js[]
#/*]]>*/
#</script>
#endif::linkcss[]
#endif::asciimath[]
#ifdef::latexmath[]
#ifdef::linkcss[]
#<script type="text/javascript" src="{scriptsdir=.}/LaTeXMathML.js"></script>
#endif::linkcss[]
#ifndef::linkcss[]
#<script type="text/javascript">
# Escape as CDATA to pass validators.
#/*<![CDATA[*/
#include1::{scriptsdir=./javascripts}/LaTeXMathML.js[]
#/*]]>*/
#</script>
#endif::linkcss[]
#endif::latexmath[]
#{docinfo1,docinfo2#}{include:{docdir}/docinfo.html}
#{docinfo,docinfo2#}{include:{docdir}/{docname}-docinfo.html}
#template::[docinfo]
#</head>
#<body class="{doctype}"{max-width? style="max-width:{max-width}"}{css-signature? id="{css-signature}"}>

# Article, book header.
ifndef::doctype-manpage[]
<div id="doc-header">
#ifndef::notitle[<h1>{doctitle}</h1>]
ifdef::doctitle[]
<span id="author">{author}</span><br>
<span id="email" class="monospaced">&lt;<a href="mailto:{email}">{email}</a>&gt;</span><br>
<span id="revnumber">version {revnumber}{revdate?,}</span>
<span id="revdate">{revdate}</span>
<br><span id="revremark">{revremark}</span>
endif::doctitle[]
{toc,toc2#}{toc-placement$auto:}{template:toc}
</div>
endif::doctype-manpage[]

<div id="doc-content">


[footer]
</div>
<div id="doc-footer">
  <p class="pull-right"><a href="#">Back to top</a></p>
  <p>{footer#{footer}}</p>
</div>

[admonitionblock]
<div class="admonitionblock{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}>
<table class="table table-borderless table-condensed table-responsive {name}"><tr>
<td class="icon">
{data-uri%}{icons#}<img src="{icon={iconsdir}/{name}.png}" alt="{caption}">
{data-uri#}{icons#}<img alt="{caption}" src="data:image/png;base64,
{data-uri#}{icons#}{sys:"{python}" -u -c "import base64,sys; base64.encode(sys.stdin,sys.stdout)" < "{eval:os.path.join(r"{indir={outdir}}",r"{icon={iconsdir}/{name}.png}")}"}">
{icons%}<div class="title">{caption}</div>
</td>
<td class="content">
<div class="title">{title}</div>
|
</td>
</tr></table>
</div>

[table]
<table class="table table-bordered table-condensed table-responsive">
<caption class="title">{caption={table-caption} {counter:table-number}. }{title}</caption>
{headrows#}<thead>
{headrows}
{headrows#}</thead>
{footrows#}<tfoot>
{footrows}
{footrows#}</tfoot>
<tbody>
{bodyrows}
</tbody>
</table>

[sidebarblock]
<aside class="col-xs-12 col-sm-3 pull-right sidebar-block{role? {role}}{unbreakable-option? unbreakable}"{id? id="{id}"}>
<div class="content">
<div class="title">{title}</div>
|
</div></aside>
