---
title: Toolkit
---


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
    <!ENTITY elephant "<systemitem class='systemname'>elephant</systemitem>" >
    <!ENTITY donkey "<systemitem class='systemname'>donkey</systemitem>" >

    <!ENTITY rootuser "<systemitem class='username'>root</systemitem>" >
    <!ENTITY myproxyuser "<systemitem class='username'>myproxy</systemitem>" >
    <!ENTITY quser "<systemitem class='username'>quser</systemitem>" >

    <!ENTITY doquserprompt "<prompt>quser@donkey&#37; </prompt>" >
    <!ENTITY passphrase "<userinput>******</userinput>" >
]
>
<article id="quickstart" xreflabel="GT Quickstart">
    <title>GT <replaceable role="entity">shortversion</replaceable> Quickstart</title>
    <articleinfo id="q-intro">
        <abstract>
            <title>Introduction</title>
            <para>
                This is a quickstart that shows a full installation of the
                Toolkit on two Fedora Linux machines, named &elephant; and
                &donkey;. It shows the installation of prereqs, installation of
                the toolkit, creation of <glossterm
                baseform="certificate">certificates</glossterm>, and configuration of
                services. It is designed to supplement the main admin guide,
                <olink targetdoc="gtadmin"/>.
            </para>
            <para>
                Scenarios are shown for running <glossterm>GridFTP</glossterm>
                and <glossterm baseform="Grid Resource Allocation and Management">GRAM5</glossterm>
                services, and using GridFTP and GRAM clients.
            </para>
        </abstract>
    </articleinfo>
    <section id="q-typography">
        <title>Typographical Conventions</title>
        <para>
            Where there is a command to be typed, it will be preceded by one of
            the following prompts:
            <variablelist>
                <varlistentry>
                    <term><prompt role="root"/></term>
                    <term><prompt role="root@donkey"/></term>
                    <listitem>
                        <simpara>
                            Run this command as the &rootuser; super-user, on
                            the &elephant; or &donkey;
                            hosts respectively.  You might have to use a
                            command like <command>su</command>(8) or
                            <command>sudo</command>(8) to start a root shell
                            before executing the command.
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><prompt role="myproxy"/></term>
                    <listitem>
                        <simpara>
                            Run this command as the &myproxyuser; user, on the
                            &elephant; host. This user is created automatically
                            when the <package>myproxy-server</package> package
                            is installed.
                        </simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><prompt role="quser"/></term>
                    <term><prompt role="quser@donkey"/></term>
                    <listitem>
                        <simpara>
                            Run this command as the normal user account you are
                            intending to interact with your Globus sevices, on
                            the &elephant; or &donkey; hosts. In this document,
                            we use the &quser; accout for this, but if you have
                            another user, you can use it for that purpose. 
                        </simpara>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Commands themselves will be typeset as <command>run-this-command
            -with-arguments</command>, and responses to the commands like this
            <computeroutput>Some Response Text</computeroutput>. If there
            is some portion of a command which should be replaced by value, such
            as a version number, it will be typeset like this:
            <replaceable>REPLACEME</replaceable>.
        </para>
        <para>
            Finally, in some cases you will be prompted for a passphrase. When
            that occurs, the entry of the passphrase will be indicated by
            &passphrase;, even though nothing will be printed to the screen.
        </para>
    </section>
    <section id="q-prereq">
        <title>Pre-requisites</title>
        <para>
            We distribute the Globus Toolkit <replaceable
            role="entity">shortversion</replaceable> as a set of RPM and Debian
            packages for Linux systems, as well as a source installer which can
            be used on other operating systems. In this quickstart, we will be
            installing RPM packages. Thus, it is a pre-requisite for following
            this quickstart that you are running a distribution for which we
            provide RPMs. If you are running a supported Debian or Ubuntu
            system, the process is very similar, but you'll need to use the
            <command>apt-get</command> or similar tools to install the
            packages. For the source installer, there is more work involved,
            and you'll need to consult the full installation guide.
        </para>
        <para>
            First, we will to set up our system to use the Globus RPM
            repository. This repository contains the Globus software packages,
            signed by our build manager. We provide RPM packages that contain a
            yum source configuration file and the public key which can be used
            to verify the packages.  If your distribution has Globus
            <replaceable role="entity">version</replaceable> packages within
            its repository, you can skip to the next section.
        </para>
        <para>
            The RPMs for the various binary repositories can be found at the
            <ulink
            url="http://www.globus.org/ftppub/gt5/{$shortversion}/{$version}/installers/repo/">repo
            config download page.</ulink>
        </para>
        <para>
            To install from binary RPMs, get the linux distribution-specific
            rpm from the link above, install it with
            <screen><prompt role="root"/><command>rpm -hUv \
    http://www.globus.org/ftppub/gt5/<replaceable
            role="entity">shortversion</replaceable>/<replaceable
            role="entity">version</replaceable>/installers/repo/Globus-<replaceable
            role="entity">shortversion</replaceable>.stable-config-<replaceable>DISTRO</replaceable>.noarch.rpm</command></screen>
        </para>
        <para>
            For example, to install the Globus repository for Feodra 17,
            the command would be; <screen><prompt role="root"/><command>rpm -hUv \
    <ulink
        url="http://www.globus.org/ftppub/gt5/{$shortversion}/{$version}/installers/repo/Globus-{$shortversion}.stable-config.fedora-17-1.noarch.rpm"/></command></screen>
        </para>
        <note>
            <para>
                The Debian and Ubuntu repositories have a different naming, and
                is based on the operating system release codenames. The pattern
                is <uri>http://www.globus.org/ftppub/gt5/<replaceable
                role="entity">shortversion</replaceable>/<replaceable
                role="entity">version</replaceable>/installers/repo/globus-repository-<replaceable
                role="entity">shortversion</replaceable>-stable-<replaceable>CODENAME</replaceable>_0.0.3_all.deb</uri>.
                So for Debian 6, codename <systemitem
                class="osname">squeeze</systemitem>, the
                repository package is located at <ulink
                url="http://www.globus.org/ftppub/gt5/{$shortversion}/{$version}/installers/repo/globus-repository-{$shortversion}-stable-squeeze_0.0.3_all.deb"/>.
            </para>
        </note>
        <para>
            Once you've installed the Globus repository package, you can use
            your operating system's packaging tools, such as
            <command>yum</command>, to install the Globus components.
        </para>
        <important>
            <para>
                For operating systems based on RHEL (such as Red Hat Enterprise
                Linux, CentOS, and Scientific Linux), the compatible EPEL
                repository must be enabled before installing myproxy. For OS
                versions 5.x, install the <ulink
                url="http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm">EPEL
                5 package</ulink>, and for OS version 6.x, use <ulink
                url="http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-7.noarch.rpm">
                6 package</ulink>.
            </para>
            <para>
                For information about installing these, see the <ulink
                url="http://fedoraproject.org/wiki/EPEL/FAQ#How_can_I_install_the_packages_from_the_EPEL_software_repository.3F">EPEL
                FAQ</ulink>.
            </para>
            <para>
                This step is not needed for Fedora, Debian, or Ubuntu systems.
            </para>
        </important>
    </section>
    <section id="q-first">
        <title>Setting up the first machine (GridFTP, GRAM, and MyProxy services)</title>
        <section id="q-toolkit">
            <title>Installing the Toolkit</title>
            <para>Install packages:
                <screen><prompt role="root"/><command>yum install globus-gridftp globus-gram5 globus-gsi myproxy \
    myproxy-server myproxy-admin</command></screen>
            </para>
            <para>
                This will install the GridFTP, GRAM, and <glossterm>MyProxy</glossterm> services, as
                well as set up a basic <glossterm>SimpleCA</glossterm> so that
                you can issue security credentials for users to run the Globus
                services.

                <note>
                    <simpara>
                        For Debian and Ubuntu systems, use
                        <command>apt-get</command> or
                        <command>aptitude</command> or another
                        package manager to install the same packages
                        as in the <command>yum</command> command above.
                    </simpara>
                </note>
            </para>
        </section>
        <section id="q-security">
            <title>Setting up security on your first machine</title>
            <para>
                The Globus Toolkit uses X.509 certificates and <glossterm
                baseform="proxy certificate">proxy certificates</glossterm>
                to authenticate and authorize grid users.
                For this quickstart, we use the Globus
                <olink targetdoc="simpleca">SimpleCA</olink>
                tools to manage our own
                <glossterm>Certificate Authority</glossterm>, so that
                we don't need to rely on any external entitty to authorize
                our grid users.
            </para>
            <note>
                <para>
                    In many deployment scenarios, certificates for both
                    services and users are obtained through one or more third
                    party CAs. In such scenarios, it is unnecessary to use
                    SimpleCA or MyProxy to issue certificates.  Since this
                    quickstart is intended to describe a simple, standalone
                    deployment scenario, we describe how to use these tools to
                    issue your own certificates.
                </para>
            </note>
            <para>
                When the <application>globus-simple-ca</application> package is
                installed, it will automatically create a new Certificate
                Authority and deploy its public certificate into the
                globus trusted certificate directory. It will also create
                a host certificate and key, so that the
                Globus services will be able to run.
            </para>
            <para>
                We'll also need to copy the host certificate and key into place
                so that the myproxy service can use it as well.
                <screen><prompt role="root"/><command>install -o myproxy -m 644 \
    /etc/grid-security/hostcert.pem \
    /etc/grid-security/myproxy/hostcert.pem</command>
<prompt role="root"/><command>install -o myproxy -m 600 \
    /etc/grid-security/hostkey.pem \
    /etc/grid-security/myproxy/hostkey.pem</command></screen>
            </para>
        </section>
        <section>
            <title>Creating a MyProxy Server</title>
            <para>
                We are going to create a MyProxy server on elephant, following
                the instructions at <ulink
                url="http://grid.ncsa.illinois.edu/myproxy/fromscratch.html#server">http://grid.ncsa.illinois.edu/myproxy/fromscratch.html#server</ulink>.
                This will be used to store our user's certificates.  In order
                to enable myproxy to use the SimpleCA, modify the
                <filename>/etc/myproxy-server.config</filename> file, by
                uncommenting every line in the section <literal>Complete Sample Policy
                #1</literal> such that section looks like this
                <ulink url="myproxy-server.config">myproxy configuration</ulink>:
                <programlisting><xi:include parse="text" 
                                    href="myproxy-server.config"
                                    xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
            </para>
            <para>
                We'll next add the myproxy user to the simpleca group so that the myproxy
                server can create certificates.
                <screen><prompt role="root"/><command>usermod -a -G simpleca myproxy</command></screen>
            </para>
            <para>
                Start the myproxy server:
                <screen><prompt role="root"/><command>service myproxy-server start</command>
<computeroutput>Starting myproxy-server (via systemctl):                   [  OK  ]</computeroutput></screen>
                <note>
                    <simpara>
                        For Debian and Ubuntu systems, use the <command>invoke-rc.d</command> command in place
                        of <command>service</command>.
                    </simpara>
                </note>
            </para>
            <para>
                Check that it is running:
                <screen><prompt role="root"/><command>service myproxy-server status</command>
<computeroutput>myproxy-server.service - LSB: Startup the MyProxy server daemon
	  Loaded: loaded (/etc/rc.d/init.d/myproxy-server)
	  Active: active (running) since Fri, 02 Nov 2012 09:07:51 -0400; 1min 20s ago
	 Process: 1205 ExecStart=/etc/rc.d/init.d/myproxy-server start (code=exited, status=0/SUCCESS)
	  CGroup: name=systemd:/system/myproxy-server.service
		  └ 1214 /usr/sbin/myproxy-server -s /var/lib/myproxy

Nov 02 09:07:51 elephant.globus.org runuser[1210]: pam_unix(runuser:session):...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1212]: myproxy-server v5.9...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1212]: reading configurati...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1212]: usage_stats: initia...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1212]: Socket bound to 0.0...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1212]: Starting myproxy-se...
Nov 02 09:07:51 elephant.globus.org runuser[1210]: pam_unix(runuser:session):...
Nov 02 09:07:51 elephant.globus.org myproxy-server[1205]: Starting myproxy-se...</computeroutput></screen>
                The important thing to see in the above is that the process is
                in the <literal>active (running)</literal> state.

                <note>
                    <simpara>
                        For other Linux distributions which are not using
                        systemd, the output will be different. You should still
                        see some information indicating the service is running.
                    </simpara>
                </note>
            </para>

            <para>
                As a final sanity check, we'll make sure the myproxy TCP port
                <literal>7512</literal> is in use via the netstat command:

                <screen><prompt role="root"/><command>netstat -an | grep 7512</command>
<computeroutput>tcp        0      0 0.0.0.0:7512            0.0.0.0:*               LISTEN</computeroutput></screen>
            </para>
            <section id="q-user-credential">
                <title>User Credentials</title>
                <para> 
                    We'll need to specify a full
                    name and a login name for the user we'll create credentials
                    for. We'll be using the <literal>QuickStart
                    User</literal> as the user's name and &quser;
                    as user's account name. You can use this as well if you first
                    create a quser unix account. Otherwise, you can use another
                    local user account. Run the
                    <command>myproxy-admin-adduser</command> command as the
                    &myproxyuser; user to create the credentials. You'll be
                    prompted for a passphrase, which must be at least 6 characters long,
                    to encrypt the <glossterm>private key</glossterm> for the user.
                    You must communicate this passphrase to the user who will be
                    accessing this credential. He can use the
                    <command>myproxy-change-passphrase</command>
                    command to change the passphrase.
                </para>
                <para>
                    The command to create the myproxy credential for the user is
                    <screen><prompt role="root"/><command>su - -s /bin/sh myproxy</command>
<prompt role="myproxy"/><command>PATH=$PATH:/usr/sbin</command>
<prompt role="myproxy"/><command>myproxy-admin-adduser -c "QuickStart User" -l quser</command>
<computeroutput>Legacy library getopts.pl will be removed from the Perl core distribution in the next major release. Please install it from the CPAN distribution Perl4::CoreLibs. It is being used at /usr/sbin/myproxy-admin-adduser, line 42.
Enter PEM pass phrase: </computeroutput>&passphrase;
<computeroutput>Verifying - Enter PEM pass phrase:</computeroutput>&passphrase;
<computeroutput>
The new signed certificate is at: /var/lib/globus/simple_ca/newcerts/02.pem

using storage directory /var/lib/myproxy
Credential stored successfully
Certificate subject is:
/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=QuickStart User</computeroutput></screen>
                </para>
            </section>
            <section id="q-gridmap">
                <title>User Authorization</title>
                <para>
                    Finally, we'll create a <glossterm>grid map file</glossterm>
                    entry for this credential, so that the holder of that
                    credential can use it to access globus services. We'll use the
                    <olink targetdoc="gsicUser"
                    targetptr="grid-mapfile-add-entry"><command>grid-mapfile-add-entry</command></olink>
                    program for this. We need to use the exact string from the
                    output above as the parameter to the <option>-dn</option>
                    command-line option, and the local account name of user to authorize
                    as the parameter to the <option>-ln</option> command-line option.

                    <screen><prompt role="root"/><command>grid-mapfile-add-entry -dn \
    "/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=QuickStart User" \
    -ln quser</command>
<computeroutput>Modifying /etc/grid-security/grid-mapfile ...
/etc/grid-security/grid-mapfile does not exist... Attempting to create /etc/grid-security/grid-mapfile
New entry:
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=QuickStart User" quser
(1) entry added</computeroutput></screen>
                </para>
            </section>
        </section>
        <section id="q-gridftp">
            <title>Setting up GridFTP</title>
            <para>
                Now that we have our host and user credentials in place, we can
                start a globus service. This set up comes from the <olink
                targetdoc="gridftpAdmin">GridFTP Admin Guide</olink>.
            </para>
            <para>
                Start the GridFTP server:
                <screen><prompt role="root"/><command>service globus-gridftp-server start</command>
<computeroutput>Started GridFTP Server                                     [  OK  ]</computeroutput></screen>
            </para>
            <para>
                Check that the GridFTP server is running and listening on the
                gridftp port:
            <screen><prompt role="root"/><command>service globus-gridftp-server status</command>
<computeroutput>GridFTP Server Running (pid=20087)</computeroutput>
<prompt role="root"/><command>netstat -an | grep 2811</command>
<computeroutput>tcp        0      0 0.0.0.0:2811            0.0.0.0:*               LISTEN</computeroutput></screen>
            </para>
            <para>
                Now the GridFTP server is waiting for a request, so we'll
                generate a proxy from the myproxy service by using
                <command>myproxy-logon</command> and then copy a file from the
                GridFTP server with the <command>globus-url-copy</command>
                command.  We'll use the passphrase used to create the myproxy
                credential for &quser;.

                <screen><prompt role="quser"/><command>myproxy-logon -s elephant</command>
<computeroutput>Enter MyProxy pass phrase: </computeroutput>&passphrase;
<computeroutput>A credential has been received for user quser in /tmp/x509up_u1001</computeroutput>
<prompt role="quser"/><command>globus-url-copy gsiftp://elephant.globus.org/etc/group \
    file:///tmp/quser.test.copy</command>
<prompt role="quser"/><command>diff /tmp/quser.test.copy /etc/group</command></screen>
            </para>
            <para>
                At this point, we've configured the myproxy and GridFTP
                services and verified that we can create a security credential
                and transfer a file. If you had trouble, check the security
                troubleshooting section in the <olink
                targetdoc="gsicAdmin">Security Admin Guide</olink>.  Now we can
                move on to setting up GRAM5 resource management.
            </para>
        </section>
        <section id="q-gram">
            <title>Setting up GRAM5</title>
            <para>
                Now that we have security and GridFTP set up, we can set up
                GRAM for resource management. There are several different Local
                Resource Managers (LRMs) that one could configure GRAM to use,
                but this guide will explain the simple case of setting up a
                "fork" jobmanager, without auditing. For details on all other
                configuration options, and for reference, you can see the
                <olink targetdoc="gram5Admin">GRAM5 Admin Guide</olink>. The
                GRAM service will use the same host credential as the GridFTP
                service, and is configured by default to use the fork manager, 
                so all we need to do now is start the service.
            </para>
            <para>
                Start the GRAM gatekeeper:
                <screen><prompt role="root"/><command>service globus-gatekeeper start</command>
<computeroutput>Started globus-gatekeeper                                  [  OK  ]</computeroutput></screen>
            </para>
            <para>
                We can now verify that the service is running and listening on
                the GRAM5 port:

                <screen><prompt role="root"/><command>service globus-gatekeeper status</command>
<computeroutput>globus-gatekeeper is running (pid=20199)</computeroutput>
<prompt role="root"/><command>netstat -an | grep 2119</command>
<computeroutput>tcp6       0      0 :::2119                 :::*                    LISTEN</computeroutput></screen>
            </para>
            <para>
                The gatekeeper is set up to run, and is ready to authorize job
                submissions and pass them on to the fork job manager. We can
                now run a couple of test jobs:
                
                <screen><prompt role="quser"/><command>myproxy-logon -s elephant</command>
<computeroutput>Enter MyProxy pass phrase: </computeroutput>&passphrase;
<computeroutput>A credential has been received for user quser in /tmp/x509up_u1001.</computeroutput>
<prompt role="quser"/><command>globus-job-run elephant /bin/hostname</command>
<computeroutput>elephant.globus.org</computeroutput>
<prompt role="quser"/><command>globus-job-run elephant /usr/bin/whoami</command>
<computeroutput>quser</computeroutput></screen>
            </para>

            <para>
                If you had trouble, check the security troubleshooting section
                in the <olink targetdoc="gsicAdmin">Security Admin
                Guide</olink>. To learn more about using GRAM 5, take a look at
                the <olink targetdoc="gram5User"
                targetptr="gram5-user-submitting-jobs">GRAM User's
                Guide</olink>.
            </para>
        </section>
    </section>
    <section id="q-second">
        <title>Setting up your second machine</title>
        <para>
            Alas, it's not much of a grid with just one machine. So let's start
            up on another machine and add it to this little test grid.
        </para>
        <section id="q-prereq2">
            <title>Setting up your second machine: Prereqs</title>
            <para>See <link linkend="q-prereq">Prereqs</link>.</para>
        </section>
        <section id="q-toolkit2">
            <title>Setting up your second machine: Installation</title>
            <para>
                Install packages as before:
                <screen><prompt role="root@donkey"/><command>yum install globus-gridftp myproxy globus-gram5</command></screen>
            </para>
        </section>
        <section id="q-security2">
            <title>Setting up your second machine: Security</title>
            <para>
                Now let's get security set up on the second machine. We're
                going to trust the original simpleCA to this new machine;
                there's no need to create a new one. First, we'll bootstrap
                trust of the SimpleCA running on elephant:

                <screen><prompt role="root@donkey"/><command>myproxy-get-trustroots -b -s elephant</command>
<computeroutput>Bootstrapping MyProxy server root of trust.
New trusted MyProxy server: /O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/CN=host/elephant.globus.org
New trusted CA (e3d1c34d.0): /O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/CN=Globus Simple CA
Trust roots have been installed in /etc/grid-security/certificates/.</computeroutput></screen>
                This allows clients and services on &donkey; to trust certificates
                which are signed by the CA on &elephant; machine. If we weren't going to run
                any Globus services on &donkey;, then we could stop here.
                Users on &donkey; could acquire credentials using the
                <command>myproxy-logon</command> command and perform file
                transfers and execute jobs using the
                <command>globus-url-copy</command> and
                <command>globus-job-run</command> commands. However, we'll continue
                to configure the GridFTP and GRAM5 services on &donkey; as well.
            </para>

            <para>
                We're going to create the host certificate for donkey, but we
                create it on elephant, so that we don't have to copy the
                certificate request between machines. The
                <command>myproxy-admin-addservice</command> command will prompt
                for a passphrase for this credential. We will use this
                passphrase to retrieve the credential on donkey.
                
                <screen><prompt role="myproxy"/><command>myproxy-admin-addservice -c "donkey.globus.org" -l donkey</command>
<computeroutput>Legacy library getopts.pl will be removed from the Perl core distribution in the next major release. Please install it from the CPAN distribution Perl4::CoreLibs. It is being used at /sbin/myproxy-admin-addservice, line 42.
Enter PEM pass phrase:</computeroutput>&passphrase;
<computeroutput>Verifying - Enter PEM pass phrase:</computeroutput>&passphrase;
<computeroutput>
The new signed certificate is at: /var/lib/globus/simple_ca/newcerts/03.pem

using storage directory /var/lib/myproxy
Credential stored successfully
Certificate subject is:
/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=donkey.globus.org</computeroutput></screen>
            </para>

            <para>
                Next we'll retrieve the credential on donkey as the root user.

                <screen><prompt role="root@donkey"/><command>myproxy-retrieve -s elephant -k donkey.globus.org -l donkey</command>
<computeroutput>Enter MyProxy pass phrase: </computeroutput>&passphrase;
<computeroutput>Credentials for quser have been stored in
/etc/grid-security/hostcert.pem and
/etc/grid-security/hostkey.pem.</computeroutput></screen>
            </para>

            <para>
                At this point, we no longer need to have &donkey;'s host certificate
                on &elephant;'s myproxy server, so we'll delete it.

                <screen><prompt role="root@donkey"/><command>myproxy-destroy -s elephant -k donkey.globus.org -l donkey</command>
<computeroutput>MyProxy credential 'donkey.globus.org' for user donkey was successfully removed.</computeroutput></screen>
            </para>

            <para>
                And as a final setup, we'll add quser's credential to the
                grid-mapfile on &donkey;, so that the &quser; account can access
                services there as well.
                <screen><prompt role="root@donkey"/><command>grid-mapfile-add-entry -dn \
    "/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=QuickStart User" \
    -ln quser</command>
<computeroutput>Modifying /etc/grid-security/grid-mapfile ...
/etc/grid-security/grid-mapfile does not exist... Attempting to create /etc/grid-security/grid-mapfile
New entry:
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=local/CN=QuickStart User" quser
(1) entry added</computeroutput></screen>
            </para>

            <para>
                At this point, we have set up security on donkey to trust the
                CA on elephant. We have created a host certificate
                for donkey so that we can run Globus services on donkey, and we
                have enabled the quser account to use services on donkey. The
                last thing to do is to turn on the Globus services on donkey.
            </para>
        </section>
        <section id="q-gridftp2">
            <title>Setting up your second machine: GridFTP</title>
            <para>
                GridFTP set up on the second machine is identical to the first.
                I'll just list the commands here; see <olink
                targetptr="q-gridftp"/> for additional information.
                <screen><prompt role="root@donkey"/><command>service globus-gridftp-server start</command>
<computeroutput>Started GridFTP Server                                     [  OK  ]</computeroutput></screen>
                Now we can test it.
            </para>
            <para>
                First, we'll retrive a proxy credential from the myproxy server
                so that the user on donkey can interact with the Globus
                services. Here we'll use the same passphrase as we used to
                create the &quser; credential.

                <screen><prompt role="quser@donkey"/><command>myproxy-logon -s elephant</command>
<computeroutput>Enter MyProxy pass phrase: </computeroutput>&passphrase;
<computeroutput>A credential has been received for user quser in /tmp/x509up_u1001.</computeroutput></screen>
            </para>

            <para>
                Next we'll transfer a file between the gridftp servers on donkey and elephant:

                <screen><prompt role="quser@donkey"/><command>globus-url-copy gsiftp://elephant.globus.org/etc/group \
   gsiftp://donkey.globus.org/tmp/from-elephant</command></screen>
                That was a slightly more complicated test than we ran on
                elephant earlier. In this case, we did a third-party transfer
                between two GridFTP servers. It worked, so I have the local and
                remote security configured correctly.
            </para>
            <para>
                If you run into problems, perhaps you have a firewall between
                the two machines? GridFTP needs to communicate on data ports,
                not just port 2811. The error for this condition looks like:
                <screen><computeroutput>error: globus_ftp_client: the server responded with an error
500 500-Command failed. : callback failed.
500-globus_xio: Unable to connect to 140.221.8.19:42777
500-globus_xio: System error in connect: No route to host
500-globus_xio: A system call failed: No route to host
500 End.</computeroutput></screen>
                You can set up a range of ports to be open on the firewall and
                configure GridFTP to use them. See <olink
                targetdoc="gridftpAdmin"
                targetptr="gridftp-config-security-firewalls">the GridFTP admin
                firewall doc.</olink>
            </para>
        </section>
        <section id="q-gram2">
            <title>Setting up your second machine: GRAM5</title>
            <para>
                Now we can submit a staging job. This job will copy the
                <command>/bin/echo</command> program from donkey to a file
                called <filename>/tmp/my_echo</filename>. Then it runs it with
                some arguments, and captures the stderr/stdout. Finally, it
                will clean up the <filename>my_echo</filename> file when
                execution is done.
                <screen><prompt role="quser@donkey"/><command>globus-job-run elephant \
    -x '(file_stage_in=(gsiftp://donkey.globus.org/bin/echo /tmp/echo)) \
        (file_clean_up=/tmp/echo)' /bin/ls -l /tmp/echo</command>
<computeroutput>-rw-r--r-- 1 quser quser 27120 Nov  2 09:56 /tmp/echo</computeroutput></screen>
                This example staged in a file, had an executable act on that
                file, and cleaned up the file afterward.
            </para>
            <para>
                You can get other examples of GRAM files from <olink
                targetdoc="gram5User"
                targetptr="gram5-user-usagescenarios">GRAM usage
                scenarios</olink>.
            </para>
        </section>
    </section>
    <section id="q-conclusion">
        <title>Conclusion</title>
        <para>
            Hopefully this guide has been helpful in familiarizing you with
            some of the administration tasks and tools to use the Globus
            Toolkit. If you've reached this point successfully, you should
            have enough knowledge to enable additional hosts to use your 
            grid by repeating the tasks in <olink targetptr="q-second"/>.
            Also, by repeating the tasks in <olink
            targetptr="q-user-credential"/> and
            <olink targetptr="q-gridmap"/> you can enable additional users
            to access your compute and data resources.
        </para>
    </section>
    <glossary role="auto" id="glossary-quickstart">
        <glossdiv>
            <title>A</title>
            <glossentry>
                <glossterm>Irrelevant</glossterm>
                <glossdef>
                    <para>If you can see this, the document was processed incorrectly. Use the <parameter>glossary.collection</parameter> parameter.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
    </glossary>
</article>